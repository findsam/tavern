import Wrap from "./wrap";
import Trending from "./trending";
import Post from "./post";
import { useState, useEffect, useRef, useCallback } from "react";
import Image from "next/legacy/image";
import { AiOutlineArrowDown, AiOutlinePlus } from "react-icons/ai";

const images = [
  "1.jpg",
  "2.jpg",
  "3.jpg",
  "4.jpg",
  "5.webp",
  "6.jpg",
  "7.jpg",
  "8.jpg",
  "9.webp",
  "10.jpg",
  "11.jpg",
  "12.jpg",
  "13.jpg",
  "14.jpg",
  "15.jpeg",
  "16.jpeg",
  "17.jpeg",
  "18.jpg",
  "19.webp",
];

export default () => {
  const [posts, setPosts] = useState([]);
  const container = useRef();
  const [columnWrappers, setColumnWrappers] = useState({});
  const size = useWindowSize();
  const [cols, setCols] = useState(4);

  useEffect(() => {
    testingInfiniteScroll();
  }, []);

  function testingInfiniteScroll() {
    let imageIndex = 0;
    for (let i = 0; i < 80; i++) {
      let item = {
        id: i,
        title: `Post ${i}`,
        image: images[imageIndex],
      };
      setPosts((prevPosts) => [...prevPosts, item]);
      imageIndex++;
      if (imageIndex > images.length - 1) imageIndex = 0;
    }
  }

  function generateMasonryGrid(columns, posts) {
    setColumnWrappers([]);
    for (let i = 0; i < columns; i++) {
      setColumnWrappers((prev) => ({ ...prev, [`column${i}`]: [] }));
    }
    for (let i = 0; i < posts.length; i++) {
      const column = i % columns;
      setColumnWrappers((prev) => ({
        ...prev,
        [`column${column}`]: [...prev[`column${column}`], posts[i]],
      }));
    }
  }

  useEffect(() => {
    generateMasonryGrid(cols, posts);
  }, [posts, cols]);

  const observer = useRef();
  const lastPost = useCallback((node) => {
    if (observer.current) observer.current.disconnect();
    observer.current = new IntersectionObserver((entries) => {
      if (entries[0].isIntersecting) testingInfiniteScroll();
    });
    if (node) observer.current.observe(node);
  }, []);

  console.log(size.width);

  useEffect(() => {
    console.log("running");
    if (size.width > 1400) setCols(4);
    if (size.width < 1400) setCols(3);
    if (size.width < 1000) setCols(2);
    if (size.width < 750) setCols(1);
  }, [size.width]);

  return (
    <>
      <div
        className="w-[calc(100%-275px)] ml-auto flex relative gap-5 pt-24 px-5 pb-12"
        ref={container}
      >
        {Object.keys(columnWrappers)
          .slice(0, Object.keys(columnWrappers).length - 1)
          .map((key, index) => {
            return (
              <div className="flex flex-col flex-1 gap-5" key={index}>
                {columnWrappers[key].map((item, index) => (
                  <div
                    className="relative w-full overflow-hidden border rounded-lg bg-main-800 border-main-700"
                    key={index}
                  >
                    <div className="w-full bg-main-800">
                      <div className="flex gap-3 p-1.5 text-white">
                        <Image
                          className="rounded-full ring-1 ring-main-600 p-0.5 shrink-0"
                          height="38"
                          width="38"
                          src={`https://cdn.discordapp.com/avatars/1012899721477619862/0ea94e9083dea503c92e8f562060d81d.webp`}
                          alt="discord user profile picture generated by api"
                        />
                        <span className="grid text-sm">
                          <a>swkn#dev</a>
                          <p className="text-xs tracking-wide">
                            <span className="opacity-70">12 minutes ago on</span>{" "}
                            Photoshop
                          </p>
                        </span>
                      </div>
                      <div className="relative h-full max-w-full mx-auto my-0">
                        <img src={"/" + item.image} className="object-fill w-full" />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            );
          })}

        {Object.keys(columnWrappers)
          .slice(-1)
          .map((key, index) => {
            return (
              <div className="flex flex-col flex-1 gap-5" key={index}>
                {columnWrappers[key].map((item, index) => {
                  if (columnWrappers[key].length === index + 1) {
                    return (
                      <div
                        className="relative w-full overflow-hidden border rounded-lg bg-main-800 border-main-700 min-h-[300px] flex items-center justify-center"
                        key={index}
                        ref={lastPost}
                      >
                        <AiOutlinePlus size={60} />
                      </div>
                    );
                  }
                  return (
                    <div
                      className="relative w-full overflow-hidden border rounded-lg bg-main-800 border-main-700"
                      key={index}
                    >
                      <div className="w-full bg-main-800">
                        <div className="flex gap-3 p-1.5 text-white">
                          <Image
                            className="rounded-full ring-1 ring-main-600 p-0.5 shrink-0"
                            height="38"
                            width="38"
                            src={`https://cdn.discordapp.com/avatars/1012899721477619862/0ea94e9083dea503c92e8f562060d81d.webp`}
                            alt="discord user profile picture generated by api"
                          />
                          <span className="grid text-sm">
                            <a>swkn#dev</a>
                            <p className="text-xs tracking-wide">
                              <span className="opacity-70">12 minutes ago on</span>{" "}
                              Photoshop
                            </p>
                          </span>
                        </div>
                        <div className="relative h-full max-w-full mx-auto my-0">
                          <img
                            src={"/" + item.image}
                            className="object-fill w-full"
                          />
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            );
          })}
      </div>
    </>
  );
};

const RenderPostItem = () => {};

function getWindow() {
  return typeof window !== "undefined" ? window : null;
}
// Debounce function
function debounce(func, wait, immediate) {
  var timeout;
  return function () {
    var context = this,
      args = arguments;
    var later = function () {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
}

function useWindowSize() {
  const window = getWindow();
  function getSize() {
    return {
      width: window?.innerWidth,
      height: window?.innerHeight,
    };
  }

  const [windowSize, setWindowSize] = useState(getSize);

  useEffect(() => {
    var handleResizeDebounced = debounce(function handleResize() {
      setWindowSize(getSize());
    }, 250);

    window.addEventListener("resize", handleResizeDebounced);
    return () => window.removeEventListener("resize", handleResizeDebounced);
  }, []);

  return windowSize;
}
