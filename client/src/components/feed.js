import Wrap from "./wrap";
import Trending from "./trending";
import { useState, useEffect, useRef, useCallback } from "react";
import Image from "next/legacy/image";
import { AiOutlineArrowDown, AiOutlinePlus, AiOutlineArrowUp } from "react-icons/ai";

const images = [
  "1.jpg",
  "2.jpg",
  "3.jpg",
  "4.jpg",
  "5.webp",
  "6.jpg",
  "7.jpg",
  "8.jpg",
  "9.webp",
  "10.jpg",
  "11.jpg",
  "12.jpg",
  "13.jpg",
  "14.jpg",
  "15.jpeg",
  "16.jpeg",
  "17.jpeg",
  "18.jpg",
  "19.webp",
];

export default () => {
  const [posts, setPosts] = useState([]);
  const container = useRef();
  const [columnWrappers, setColumnWrappers] = useState({});
  const size = useWindowSize();
  const [cols, setCols] = useState(4);

  useEffect(() => {
    testingInfiniteScroll();
  }, []);

  function testingInfiniteScroll() {
    let imageIndex = 0;
    for (let i = 0; i < 80; i++) {
      let item = {
        id: i,
        title: `Post ${i}`,
        image: images[imageIndex],
      };
      setPosts((prevPosts) => [...prevPosts, item]);
      imageIndex++;
      if (imageIndex > images.length - 1) imageIndex = 0;
    }
  }

  function generateMasonryGrid(columns, posts) {
    setColumnWrappers([]);
    for (let i = 0; i < columns; i++) {
      setColumnWrappers((prev) => ({ ...prev, [`column${i}`]: [] }));
    }
    for (let i = 0; i < posts.length; i++) {
      const column = i % columns;
      setColumnWrappers((prev) => ({
        ...prev,
        [`column${column}`]: [...prev[`column${column}`], posts[i]],
      }));
    }
  }

  useEffect(() => {
    generateMasonryGrid(cols, posts);
  }, [posts, cols]);

  const observer = useRef();
  const lastPost = useCallback((node) => {
    if (observer.current) observer.current.disconnect();
    observer.current = new IntersectionObserver((entries) => {
      if (entries[0].isIntersecting) testingInfiniteScroll();
    });
    if (node) observer.current.observe(node);
  }, []);

  useEffect(() => {
    if (size.width > 1450) setCols(5);
    if (size.width < 1450) setCols(4);
    if (size.width < 1100) setCols(3);
    if (size.width < 850) setCols(2);
    if (size.width < 600) setCols(1);
  }, [size.width]);

  return (
    <>
      <div className="relative flex gap-5 ml-auto" ref={container}>
        {Object.keys(columnWrappers)
          .slice(0, Object.keys(columnWrappers).length - 1)
          .map((key, index) => (
            <div className="flex flex-col flex-1 gap-5" key={index}>
              {columnWrappers[key].map((item, index) => (
                <Post post={item} key={index} />
              ))}
            </div>
          ))}
        {Object.keys(columnWrappers)
          .slice(-1)
          .map((key, index) => (
            <div className="flex flex-col flex-1 gap-5" key={index}>
              {columnWrappers[key].map((item, index) => {
                if (columnWrappers[key].length === index + 1) {
                  return (
                    <span key={index} ref={lastPost}>
                      <Post post={item} />
                    </span>
                  );
                }
                return <Post post={item} key={index} />;
              })}
            </div>
          ))}
      </div>
    </>
  );
};

const Post = ({ post }) => {
  return (
    <div className="relative w-full overflow-hidden border rounded-lg bg-main-800 border-main-border drop-shadow-lg">
      <div className="w-full bg-main-800">
        <div className="relative h-full max-w-full mx-auto my-0">
          <img src={"/" + post.image} className="object-fill w-full" />
        </div>
        <div className="flex items-center w-full gap-3 p-2.5 text-white">
          <Image
            className=" border border-main-700 rounded-full drop-shadow-sm p-0.5 shrink-0"
            height="28"
            width="28"
            quality={100}
            src={`https://cdn.discordapp.com/avatars/1012899721477619862/0ea94e9083dea503c92e8f562060d81d.webp`}
            alt="discord user profile picture generated by api"
          />
          <span className="grid text-sm">
            <p className="text-xs tracking-wide ">swkn#dev</p>
            <ul className="flex gap-2 text-[10px] font-normal tracking-wide opacity-30 leading-none">
              <li>#project</li>
              <li>#photoshop</li>
              <li>#rpg</li>
            </ul>
          </span>
        </div>
      </div>
    </div>
  );
};

const getWindow = () => (typeof window !== "undefined" ? window : null);
const debounce = (func, timeout) => {
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => {
      func.apply(this, args);
    }, timeout);
  };
};

function useWindowSize() {
  const window = getWindow();
  const getSize = () => ({ width: window?.innerWidth, height: window?.innerHeight });
  const [windowSize, setWindowSize] = useState(getSize);
  useEffect(() => {
    const handleResizeDebounced = debounce(() => {
      setWindowSize(getSize());
    }, 500);
    window.addEventListener("resize", handleResizeDebounced);
    return () => window.removeEventListener("resize", handleResizeDebounced);
  }, []);
  return windowSize;
}
